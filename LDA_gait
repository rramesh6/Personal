#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jul  9 15:47:56 2023

@author: Rithvik
"""

import numpy as np
import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# data = pd.read_csv('/Users/Rithvik/Documents/UCSF/Research/wang_lab/Data/RCS_02/PSD Analysis/revised_poststim/Feature Tables/RCS02_poststim_key1_key2_key3_feature.csv')
data_1 = pd.read_csv('/Volumes/dwang3_shared/Patient Data/RC+S Data/RCS09/v4_2023-08-31_Parameter-Testing-Clinic_002/Data/Analysis Data/Rithvik/Feature Tables/l_key0_rcs.csv')
data_2 = pd.read_csv('/Volumes/dwang3_shared/Patient Data/RC+S Data/RCS09/v4_2023-08-31_Parameter-Testing-Clinic_002/Data/Analysis Data/Rithvik/Feature Tables/l_key2_rcs.csv')
data_3 = pd.read_csv('/Volumes/dwang3_shared/Patient Data/RC+S Data/RCS09/v4_2023-08-31_Parameter-Testing-Clinic_002/Data/Analysis Data/Rithvik/Feature Tables/l_key3_rcs.csv')

x_1 = data_1.iloc[:, :-1]
x_2 = data_2.iloc[:, :-1]
x_3 = data_3.iloc[:, :-1]
x = pd.concat([x_1,x_2,x_3],axis=1)
y = data_1.iloc[:,-1]

count_0s = (y == 0).sum()
count_1s = (y == 1).sum()

# Calculate the excess 1s
excess_0s = count_0s - count_1s

# If there are more 1s than 0s, randomly select rows to remove
if excess_0s > 0:
    # Get the indices of rows with 'Gait' equal to 1
    indices_to_remove = y[y == 0].sample(excess_0s, random_state=6).index

    # Remove the selected rows
    x = x.drop(indices_to_remove)
    y = y.drop(indices_to_remove)
    
scaler = StandardScaler()
scaler.fit(x)
x = scaler.transform(x)

cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=5, random_state=1)
model = LinearDiscriminantAnalysis()
scores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)
print('Mean accuracy is', 100*np.mean(scores))

model.fit(x, y)
y_hat = model.predict(x)
tn, fp, fn, tp = confusion_matrix(y, y_hat).ravel()
sensitivity = tp / (tp + fn)
specificity = tn / (tn + fp)
ppv = tp / (tp + fp)
accuracy = (tp + tn) / (tp + tn + fp + fn)

precision = tp / (tp + fp)
recall = tp / (tp + fn)
f1_score = 2 * (precision * recall) / (precision + recall)

cm = confusion_matrix(y, y_hat)
colormap = 'Blues'
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap=colormap)
class_names = ["Non-Gait", "Gait"]
tick_marks = range(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
plt.show()

fpr, tpr, thresholds = roc_curve(y,y_hat)
roc_auc = auc(fpr, tpr)
plt.plot(fpr, tpr, label='ROC curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')  # Diagonal line representing random guessing
plt.xlabel('False Positive Rate (FPR)')
plt.ylabel('True Positive Rate (TPR)')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

num_keys = 3
bars_per_group = 6
feature_weights = model.coef_
colors = ['red', 'green', 'blue']
labels = ['Key 1', 'Key 2', 'Key 3']
fig, ax = plt.subplots()

x = data.iloc[:, :-1]
for i in range(num_keys):
    start_idx = i * bars_per_group
    end_idx = (i + 1) * bars_per_group
    ax.bar(x.columns[start_idx:end_idx], feature_weights[0][start_idx:end_idx], color=colors[i], label = labels[i])
    
plt.xticks(rotation='vertical')
plt.xlabel('Features')
plt.ylabel('Weights')
plt.title('LDA Feature Weights')
plt.legend()
plt.show()

## 

test_data_1 = pd.read_csv('/Volumes/dwang3_shared/Patient Data/RC+S Data/gait_RCS_05/Rover/Data/Analysis Data/Revised Feature Tables/date_partitioning/key0_test.csv')
test_data_2 = pd.read_csv('/Volumes/dwang3_shared/Patient Data/RC+S Data/gait_RCS_05/Rover/Data/Analysis Data/Revised Feature Tables/date_partitioning/key2_test.csv')
test_data_3 = pd.read_csv('/Volumes/dwang3_shared/Patient Data/RC+S Data/gait_RCS_05/Rover/Data/Analysis Data/Revised Feature Tables/date_partitioning/key3_test.csv')

test_x_1 = test_data_1.iloc[:, :-1]
test_x_2 = test_data_2.iloc[:, :-1]
test_x_3 = test_data_3.iloc[:, :-1]
test_x = pd.concat([test_x_1,test_x_2,test_x_3],axis=1)
test_y = test_data_1.iloc[:,-1]
    
scaler = StandardScaler()
scaler.fit(test_x)
test_x = scaler.transform(test_x)

test_y_hat = model.predict(test_x)
    
tn, fp, fn, tp = confusion_matrix(test_y, test_y_hat).ravel()
sensitivity = tp / (tp + fn)
specificity = tn / (tn + fp)
ppv = tp / (tp + fp)
accuracy = (tp + tn) / (tp + tn + fp + fn)

cm = confusion_matrix(test_y, test_y_hat)
colormap = 'Blues'
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap=colormap)
class_names = ["Non-Gait", "Gait"]
tick_marks = range(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
plt.show()

fpr, tpr, thresholds = roc_curve(test_y,test_y_hat)
roc_auc = auc(fpr, tpr)
plt.plot(fpr, tpr, label='ROC curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')  # Diagonal line representing random guessing
plt.xlabel('False Positive Rate (FPR)')
plt.ylabel('True Positive Rate (TPR)')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()
  
precision = tp / (tp + fp)
recall = tp / (tp + fn)
test_f1_score = 2 * (precision * recall) / (precision + recall) 
    
    
    